function review(alasql){
    console.log(`
    /////////////
    5장 내용 복습
    /////////////
    
    1. 레코드 정렬
    
    실행 순서
    FROM WHERE GROUP BY HAVING SELECT DISTINCT 
    ORDER BY
    
    
   
    GROUP BY 컬럼 명으로 테이블을 각각 묶은 뒤
    각각의 묶음 레코드에 대해
    HAVING 어떤 조건으로 레코드를 걸러낸다.
   
    전체 그리고 묶음에 대한 레코드 걸러낸 결과에 대해서
    SELECT 컬럼, 집계, 상수 등을 열로 하는 테이블을 뽑아내고
    DISTINCT 특정 열 값이 고유한 것만 남긴다.
 
 
    2. 컬럼을 중복값 없는 상태로(DISTINCT) 가져오기(SELECT) 
    
    SELECT 로 테이블이 만들어진 상태에서, 그 다음에 DISTINCT 로 중복값이 없는 테이블을 만든다.
    
    >console.table(alasql('SELECT pref FROM Inquiry ORDER BY pref ASC'))
    >console.table(alasql('SELECT DISTINCT pref FROM Inquiry'))
    ┌─────────┬──────────┐ ┌─────────┬──────────┐
    │ (index) │   pref   │ │ (index) │   pref   │
    ├─────────┼──────────┤ ├─────────┼──────────┤
    │    0    │ '경기도'   │ │    0    │ '서울시' │
    │    1    │ '서울시'   │ │    1    │ '충청도' │
    │    2    │ '서울시'   │ │    2    │ '경기도' │
    │    3    │ '서울시'   │ └─────────┴──────────┘
    │    4    │ '충청도'   │
    │    5    │ '충청도'   │
    └─────────┴──────────┘

    컬렴명을 두 개 이상 조합하면? 조합의 결과가 고유한 것만 남김.
    
    pref + age 두 개를 합쳐서 고유한 값만 남기면?
    
    경기도40 과 경기도50 그리고 서울40 은 각각이 고유한 값이 됨. 
    
    >console.table(alasql('SELECT pref, age, pref = "서울시" AND age =20 AS "조합의 중복" FROM Inquiry ORDER BY pref ASC, age ASC'))
    >console.table(alasql('SELECT DISTINCT pref, age FROM Inquiry ORDER BY pref ASC, age ASC'))
    ┌─────────┬──────────┬─────┬───────────────┐ ┌─────────┬──────────┬─────┐
    │ (index) │   pref   │ age │ '조합의 중복'   │ │ (index) │   pref   │ age │
    ├─────────┼──────────┼─────┼───────────────┤ ├─────────┼──────────┼─────┤
    │    0    │ '경기도'  │ 40  │     false     │ │    0    │ '경기도' │ 40  │
    │    1    │ '서울시'  │ 20  │     true      │ │    1    │ '서울시' │ 20  │ //  조합의 중복이 DISTINCT 됨
    │    2    │ '서울시'  │ 20  │     true      │ │    2    │ '서울시' │ 30  │
    │    3    │ '서울시'  │ 30  │     false     │ │    3    │ '충청도' │ 20  │
    │    4    │ '충청도'  │ 20  │     false     │ │    4    │ '충청도' │ 30  │
    │    5    │ '충청도'  │ 30  │     false     │ └─────────┴──────────┴─────┘
    └─────────┴──────────┴─────┴───────────────┘ 
    
     3. 함수 사용
     
     COUNT, AVG 등 주어진 레코드 묶음에 대해 결과 레코드 1 개만 리턴하는 함수.
     레코드 묶음이면 NULL 까찌 포함해서 계산하고, 특정 컬럼것만 인자로 넘기면 NULL 을 제외하고 계산한 레코드를 리턴한다.
     
     전체 레코드에 대한 계산이 이루어지는 FROM WHERE GROUP BY 에서는 사용이 불가하고,
     SELECT, HAVING ORDER BY 에서는 사용 가능하다.
     
     대상 데이터
     
     const fdata = 
     [
      { id: 1, pref: '서울시', age: 20, star: 2 , star_null: undefined},
      { id: 2, pref: '충청도', age: 30, star: 5 , star_null: undefined},
      { id: 3, pref: '경기도', age: 40, star: 3 , star_null: undefined},
      { id: 4, pref: '충청도', age: 20, star: 4 , star_null: undefined},
      { id: 5, pref: '서울시', age: 30, star: 4 , star_null: undefined},
      { id: 6, pref: '서울시', age: 20, star: 1 , star_null: undefined},
      { id: 7, pref: undefined, age: undefined, star: undefined , star_null: undefined}
    ]
    
    테이블을 넣는 방법은 아래와 같고. 직접 넣을까 하다가 
    https://github.com/AlaSQL/alasql/wiki/How-to-insert-data-into-the-table
    
    From 문에서 인자로 넣어준 데이터에 접근하는 방법을 사용함. 
    방법이 문서에 나오지는 않았는데 오류를 보니 내부적으로 $싸인으로 접근하는 거 같아서 해보니 잘됨
    https://github.com/AlaSQL/alasql/wiki/From

     
     4. SUM, MAX, MIN, AVG 사용
     
     위에서 NULL 을 추가한 fdata 에 대해서 함수를 사용해보자.
     
     함수는 주어진 묶음 레코드(열)에 대해 하나의 레코드 결과만을 반환한다.
     Null 이 있더라도, 테이블의 총 레코드 개수를 카운팅. 
     
     >console.table(alasql('SELECT COUNT(*) from $0', [fdata]))
    ┌─────────┬────┐  ┌─────────┬──────────┐
    │ (index) │ id │  │ (index) │ COUNT(*) │
    ├─────────┼────┤  ├─────────┼──────────┤
    │    0    │ 1  │  │    0    │    7     │
    │    1    │ 2  │  └─────────┴──────────┘
    │    2    │ 3  │  
    │    3    │ 4  │  
    │    4    │ 5  │  
    │    5    │ 6  │  
    │    6    │ 7  │  
    └─────────┴────┘  


    만약 특정 컬럼을 집계했는데 그 레코드에 NULL 이 있다면? NULL 을 뺀 결과를 카운팅.
     
     >console.table(alasql('SELECT COUNT(*), COUNT(age), SUM(*), SUM(age)  from $0', [fdata]))
    ┌─────────┬────┬───────────┐  ┌─────────┬──────────┬────────────┬────────┬──────────┐
    │ (index) │ id │    age    │  │ (index) │ COUNT(*) │ COUNT(age) │ SUM(*) │ SUM(age) │
    ├─────────┼────┼───────────┤  ├─────────┼──────────┼────────────┼────────┼──────────┤
    │    0    │ 1  │    20     │  │    0    │    7     │     6      │   0    │   160    │
    │    1    │ 2  │    30     │  └─────────┴──────────┴────────────┴────────┴──────────┘
    │    2    │ 3  │    40     │  
    │    3    │ 4  │    20     │  
    │    4    │ 5  │    30     │
    │    5    │ 6  │    20     │
    │    6    │ 7  │ undefined │
    └─────────┴────┴───────────┘

    SELECT 에 특정 컬럼을 추가해도, 함수가 있다면, NULL 한 줄만 나올 뿐이다.
    
    >console.table(alasql('SELECT age, COUNT(*), COUNT(age), SUM(*), SUM(age)  from $0', [fdata]))
    ┌─────────┬───────────┬──────────┬────────────┬────────┬──────────┐
    │ (index) │    age    │ COUNT(*) │ COUNT(age) │ SUM(*) │ SUM(age) │
    ├─────────┼───────────┼──────────┼────────────┼────────┼──────────┤
    │    0    │ undefined │    7     │     6      │   0    │   160    │
    └─────────┴───────────┴──────────┴────────────┴────────┴──────────┘

    SELECT * 은? 가장 첫 레코드 한 줄만 출력이 된다.

     >console.table(alasql('SELECT *, COUNT(*), COUNT(age), SUM(*), SUM(age)  from $0', [fdata]))
    ┌─────────┬──────────┬────────────┬────────┬──────────┬────┬──────────┬─────┬──────┬───────────┐
    │ (index) │ COUNT(*) │ COUNT(age) │ SUM(*) │ SUM(age) │ id │   pref   │ age │ star │ star_null │
    ├─────────┼──────────┼────────────┼────────┼──────────┼────┼──────────┼─────┼──────┼───────────┤
    │    0    │    7     │     6      │   0    │   160    │ 1  │ '서울시'  │ 20  │  2   │ undefined │
    └─────────┴──────────┴────────────┴────────┴──────────┴────┴──────────┴─────┴──────┴───────────┘

    만약 모든 레코드 값이 NULL인 열에 함수를 쓴다면?
    COUNT 함수 외에는 모두 Null 을 반환한다.

    >console.table(alasql('SELECT COUNT(star_null), MAX(star_null), MIN(star_null), AVG(star_null) FROM $0', [fdata]))
    ┌─────────┬────┬───────────┐  ┌──────────────────┬────────────────┬────────────────┬────────────────┐
    │ (index) │ id │ star_null │  │ COUNT(star_null) │ MAX(star_null) │ MIN(star_null) │ AVG(star_null) │
    ├─────────┼────┼───────────┤  ├──────────────────┼────────────────┼────────────────┼────────────────┤
    │    0    │ 1  │ undefined │  │        0         │   undefined    │   undefined    │   undefined    │
    │    1    │ 2  │ undefined │  └──────────────────┴────────────────┴────────────────┴────────────────┘
    │    2    │ 3  │ undefined │  
    │    3    │ 4  │ undefined │
    │    4    │ 5  │ undefined │
    │    5    │ 6  │ undefined │
    │    6    │ 7  │ undefined │
    └─────────┴────┴───────────┘


    5. 그롭화 - 레코드를 집약키(기준 컬럼)에 따라 묶고 각각의 그룹에 대해 함수 적용하기
    
    GROUP BY 로 묶어보기
    >console.table(alasql('SELECT pref FROM Inquiry GROUP BY pref'))

    전체 레코드를             집약키(컬럼명)으로 묶고    각가의 묶음의 결과를 하나의 레코드로 가지는 전체 레코드 반환
    ┌─────────┬──────────┐ ┌─────────┬──────────┐  ┌─────────┬──────────┐
    │ (index) │   pref   │ │ (index) │   pref   │  │ (index) │   pref   │
    ├─────────┼──────────┤ ├─────────┼──────────┤  ├─────────┼──────────┤
    │    0    │ '경기도'  │ │    0    │ '경기도'  │   │    0    │ '서울시' │
    │    1    │ '서울시'  │ └─────────┴──────────┘   │    1    │ '충청도' │
    │    2    │ '서울시'  │ ┌─────────┬──────────┐   │    2    │ '경기도' │
    │    3    │ '서울시'  │ │ (index) │   pref   │   └─────────┴──────────┘
    │    4    │ '충청도'  │ ├─────────┼──────────┤
    │    5    │ '충청도'  │ │    2    │ '서울시'  │
    └─────────┴──────────┘ │    3    │ '서울시'  │
                           └─────────┴──────────┘
                           ┌─────────┬──────────┐
                           │ (index) │   pref   │
                           ├─────────┼──────────┤
                           │    4    │ '충청도'  │ 
                           │    5    │ '충청도'  │ 
                           └─────────┴──────────
                           
    GROUP BY 로 묶인 각각의 레코드 묶음에 함수를 적용해보기   
    
    >console.table(alasql('SELECT pref, COUNT(age) FROM Inquiry GROUP BY pref ORDER BY pref'))
    전체 레코드를         컬렴명으로 각각 묶고    각각의 묶음에 대해 함수 적용   결과 모아서 보여줌
    ┌──────────┬─────┐ ┌──────────┬─────┐ ┌──────────┬────────────┐  ┌─────────┬──────────┬────────────┐
    │   pref   │ age │ │   pref   │ age │ │   pref   │ COUNT(age) │  │ (index) │   pref   │ COUNT(age) │
    ├──────────┼─────┤ ├──────────┼─────┤ ├──────────┼────────────┤  ├─────────┼──────────┼────────────┤
    │ '경기도'  │ 40  │ │ '경기도'  │ 40  │ │ '경기도'   │ 1          │  │    0    │ '경기도'  │     1      │
    │ '서울시'  │ 20  │ └──────────┴─────┘ └──────────┴─────────────┘  │    1    │ '서울시'  │     3      │
    │ '서울시'  │ 30  │ ┌──────────┬─────┐ ┌──────────┬────────────┐  │    2    │ '충청도'  │     2      │
    │ '서울시'  │ 20  │ │   pref   │ age │ │   pref   │ COUNT(age) │  └─────────┴──────────┴────────────┘
    │ '충청도'  │ 30  │ ├──────────┼─────┤ ├──────────┼────────────┤  
    │ '충청도'  │ 20  │ │ '서울시'  │ 20  │ │ '서울시'  │ 1           │  
    └──────────┴─────┘ │ '서울시'  │ 30  │ └──────────┴─────────────┘
                       └──────────┴─────┘
                       ┌──────────┬─────┐ ┌──────────┬────────────┐
                       │   pref   │ age │ │   pref   │ COUNT(age) │
                       ├──────────┼─────┤ ├──────────┼────────────┤
                       │ '충청도'  │ 30  │ │ '충청도'  │ 1           │
                       │ '충청도'  │ 20  │ └──────────┴─────────────┘
                       └──────────┴─────┘          
                     
    NULL 이 있는 레코드는? 집약키가 있는 컬럼값으로 NULL 이 있으면 NULL 이 별도의 그룹으로 묶인다.
    
    >console.table(alasql('SELECT pref, COUNT(age) FROM ? GROUP BY pref ORDER BY pref', [fdata]))
    ┌─────────┬───────────┬────────────┐
    │ (index) │   pref    │ COUNT(age) │
    ├─────────┼───────────┼────────────┤
    │    0    │ undefined │     0      │
    │    1    │ '경기도'  │     1      │
    │    2    │ '서울시'  │     3      │
    │    3    │ '충청도'  │     2      │
    └─────────┴───────────┴────────────┘
    
    6.GROUP BY 의 SELECT 에 올 수 있는 것
    
    상수, 집약 키의 컬럼명, 집약 함수

    >console.table(alasql('SELECT "상수", pref, COUNT(age) FROM Inquiry GROUP BY pref'))
    ┌─────────┬────────┬──────────┬────────────┐
    │ (index) │ '상수' │   pref   │ COUNT(age) │
    ├─────────┼────────┼──────────┼────────────┤
    │    0    │ '상수' │ '서울시' │     3      │
    │    1    │ '상수' │ '충청도' │     2      │
    │    2    │ '상수' │ '경기도' │     1      │
    └─────────┴────────┴──────────┴────────────┘

    7. 집약 키 여러 개로 그룹을 묶으먼 거듭 거듭 그룹을 만든다.
    
    위치로 나눈 다음, 그중에서도 나이로 그룹을 묶는다. 
    이후에 거듭 나우어진 그룹별로 age 를 COUNT 한 결과를 보여준다.
    
    >console.table(alasql('SELECT pref,age, COUNT(age) FROM Inquiry GROUP BY pref, age'))
    ┌─────────┬──────────┬─────┬────────────┐
    │ (index) │   pref   │ age │ COUNT(age) │
    ├─────────┼──────────┼─────┼────────────┤
    │    0    │ '서울시' │ 20  │     2      │
    │    1    │ '충청도' │ 30  │     1      │
    │    2    │ '경기도' │ 40  │     1      │
    │    3    │ '충청도' │ 20  │     1      │
    │    4    │ '서울시' │ 30  │     1      │
    └─────────┴──────────┴─────┴────────────┘

    8. 전체 테이블에 대한 조건인 WHERE 과
       GROUP BY 로 나뉘어진 묶음에 대한 조건인 HAVING 
       
    >console.table(alasql('SELECT pref, COUNT(age) FROM Inquiry GROUP BY pref'))
    ┌─────────┬──────────┬────────────┐
    │ (index) │   pref   │ COUNT(age) │
    ├─────────┼──────────┼────────────┤
    │    0    │ '서울시' │     3      │
    │    1    │ '충청도' │     2      │
    │    2    │ '경기도' │     1      │
    └─────────┴──────────┴────────────┘

    >console.table(alasql('SELECT pref, COUNT(age) FROM Inquiry GROUP BY pref HAVING COUNT(age) >= 2'))
    ┌─────────┬──────────┬────────────┐
    │ (index) │   pref   │ COUNT(age) │
    ├─────────┼──────────┼────────────┤
    │    0    │ '서울시' │     3      │
    │    1    │ '충청도' │     2      │
    └─────────┴──────────┴────────────┘
    
    
    >console.table(alasql('SELECT pref, star, age FROM Inquiry WHERE star >=2'))
    >console.table(alasql('SELECT pref, SUM(age) FROM Inquiry WHERE star >=2 GROUP BY pref'))
    
    WHERE 로 전체 레코드를 걸러낸 뒤         하위 그룹으로 묶고                     함수 적용 결과
    ┌─────────┬──────────┬──────┬─────┐ ┌─────────┬──────────┬──────┬─────┐ ┌─────────┬──────────┬──────────┐
    │ (index) │   pref   │ star │ age │ │ (index) │   pref   │ star │ age │ │ (index) │   pref   │ SUM(age) │
    ├─────────┼──────────┼──────┼─────┤ ├─────────┼──────────┼──────┼─────┤ ├─────────┼──────────┼──────────┤
    │    0    │ '서울시'  │  2   │ 20  │ │    0    │ '서울시'  │  2   │ 20  │  │    0    │ '서울시'  │    50    │
    │    1    │ '충청도'  │  5   │ 30  │ │    4    │ '서울시'  │  4   │ 30  │  │    1    │ '충청도'  │    50    │
    │    2    │ '경기도'  │  3   │ 40  │ └─────────┴──────────┴──────┴─────┘ │    2    │ '경기도'  │    40    │
    │    3    │ '충청도'  │  4   │ 20  │ ┌─────────┬──────────┬──────┬─────┐ └─────────┴──────────┴──────────┘
    │    4    │ '서울시'  │  4   │ 30  │ │ (index) │   pref   │ star │ age │
    └─────────┴──────────┴──────┴─────┘ ├─────────┼──────────┼──────┼─────┤
                                        │    1    │ '충청도'  │  5   │ 30  │
                                        │    3    │ '충청도'  │  4   │ 20  │
                                        └─────────┴──────────┴──────┴─────┘
                                        ┌─────────┬──────────┬──────┬─────┐
                                        │ (index) │   pref   │ star │ age │
                                        ├─────────┼──────────┼──────┼─────┤
                                        │    2    │ '경기도'  │  3   │ 40  │
                                        └─────────┴──────────┴──────┴─────┘
    
    >console.table(alasql('SELECT pref, SUM(age) FROM Inquiry WHERE star >=2 GROUP BY pref HAVING SUM(age) >=50'))
    
    하위 그룹으로 묶고                      HAVING 으로 각 그룹을 걸러낸다.         최종적으로 HAVING 을 거진 결과
     ┌─────────┬──────────┬──────┬─────┐ ┌─────────┬──────────┬─────────┐  ┌─────────┬──────────┬──────────┐
     │ (index) │   pref   │ star │ age │ │ (index) │   pref   │ SUM(age)│  │ (index) │   pref   │ SUM(age) │
     ├─────────┼──────────┼──────┼─────┤ ├─────────┼──────────┼─────────┤  ├─────────┼──────────┼──────────┤
     │    0    │ '서울시'  │  2   │ 20  │ │    0    │ '서울시'  │  50     │  │    0    │ '서울시'  │    50    │
     │    4    │ '서울시'  │  4   │ 30    └─────────┴──────────┴─────────┘  │    1    │ '충청도'  │    50    │
     └─────────┴──────────┴──────┴─────┘                                   └─────────┴──────────┴──────────┘
     ┌─────────┬──────────┬──────┬─────┐ ┌─────────┬──────────┬─────────┐
     │ (index) │   pref   │ star │ age │ │ (index) │   pref   │ SUM(age)│  
     ├─────────┼──────────┼──────┼─────┤ ├─────────┼──────────┼─────────┤
     │    1    │ '충청도'  │  5   │ 30  │ │    1    │ '충청도'  │  50     │  
     │    3    │ '충청도'  │  4   │ 20  │ └─────────┴──────────┴─────────┘  
     └─────────┴──────────┴──────┴─────┘  
     ┌─────────┬──────────┬──────┬─────┐ ┌─────────┬──────────┬─────────┐
     │ (index) │   pref   │ star │ age │ │ (index) │   pref   │ SUM(age)│ 
     ├─────────┼──────────┼──────┼─────┤ ├─────────┼──────────┼─────────┤ <=  SUM(age) >= 50 해당 안되므로 걸러진다.
     │    2    │ '경기도'  │  3   │ 40  │ │    2    │ '경기도'  │  40     │  
     └─────────┴──────────┴──────┴─────┘ └─────────┴──────────┴─────────┘   
    
    9. SELECT 에서 AS 로 붙인 별명은 GROUP BY 등 뒤쪽에서 사용하지 못한다.

    >console.table(alasql('SELECT pref AS "시도군청", SUM(age) FROM Inquiry WHERE star >=2 GROUP BY "시도군청" HAVING SUM(age) >=50'))
    Uncaught SyntaxError: Unexpected identifier
    
    FROM 부터 시작되고, 최종적으로 SELECT DISTINCT 이렇게 실행되기 때문에, SELECT 에서 붙인 별명을 뒤쪽에서 접근하는 것은 순서적으로 안되는 게 맞다.


    `)
}
function q1(alasql){
    alasql(
        `  
            SELECT DISTINCT category FROM Menu;
            SELECT DISTINCT category, price FROM Menu ORDER BY category ASC, price DESC;
            SELECT category FROM Menu GROUP BY category;

        `, [], resArr => {
            console.log('/////////////')
            console.log('1장 1번 문제 답')
            console.log('/////////////')

            console.table(resArr[0])
            console.table(resArr[1])
            console.table(resArr[2])
    })
}

function q2(alasql){

        console.log('/////////////')
        console.log('1장 2번 문제 답')
        console.log('/////////////')
        console.log(`
        1. 
        >console.table(alasql('SELECT COUNT(*) FROM Menu'))
        ┌─────────┬──────────┐
        │ (index) │ COUNT(*) │
        ├─────────┼──────────┤
        │    0    │    9     │
        └─────────┴──────────┘
            
        2. 
        >console.table(alasql('SELECT category, MAX(price), AVG(price), ((MAX(price)+MIN(price))/2), SUM(price)/COUNT(*) FROM Menu GROUP BY category'))
        ┌─────────┬──────────┬────────────┬───────────────────┬─────────────────────────────────┬───────────────────────┐
        │ (index) │ category │ MAX(price) │    AVG(price)     │ ((MAX(price) + MIN(price)) / 2) │ SUM(price) / COUNT(*) │
        ├─────────┼──────────┼────────────┼───────────────────┼─────────────────────────────────┼───────────────────────┤
        │    0    │  'FOOD'  │    1200    │       1100        │              1050               │         1100          │
        │    1    │ 'DRINK'  │    600     │ 533.3333333333334 │               550               │   533.3333333333334   │
        │    2    │ 'SWEETS' │    500     │        450        │               450               │          450          │
        └─────────┴──────────┴────────────┴───────────────────┴─────────────────────────────────┴───────────────────────┘
             
        3. 
          -1. WHERE 절에 들어가 수 있는 것. 
              category = 'FOOD',
           => 
          -2. SELECT 절에 들어갈 수 있는 것. 상수, 집약 함수, 집약 컬럼명
           전부 다
           =>  GROUP BY 집약 키, 경우에는.. SELECT 에 집약키 컬럼명, 상수, 집약 함수 쓸 수 있음
            category 와 COUNT(*)
          -3. GROUP BY 절에 들어갈 수 있는 것
            함수 외에 나머지 다.
            => SELECT 에 price 가 있으니까.. GROUP BY 에도 price 를 해야 결과가 제대로 나옴.
          -4. HAVING 절에 들어갈 수 있는 것. 상수, 집약 함수, 집약 컬럼명 
           전부 다.
           => HAVING 이니까. 집약함수와 비교조건 들어감.
           category = 'FOOD' 와 COUNT(*) > 2
           
           사실.. 위에서 그냥 넣으면 결과는 나온다. 다만 문제에서는 결과가 제대로 나오는 케이스로 좁히고자 한 거 가다.
        `)

}

console.log('ji 의 chap5 로드됨')

module.exports = (populatedAlasql)=> {
    // 클로저처리가 되어서 populatedAlasql 가 클로저 내부에 저장됨.
    // 리턴되는 함수가 호출될 때 부모 클로저 안에 populatedAlasql 에 접근 가능
    return {
        review: () =>{ review(populatedAlasql)},
        q1: () =>{ q1(populatedAlasql) },
        q2: () =>{ q2(populatedAlasql) },
    }
}