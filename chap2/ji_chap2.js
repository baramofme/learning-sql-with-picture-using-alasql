function review(alasql){
    console.log(`
    /////////////
    2장 내용 복습
    /////////////
    
    1. From 으로 테이블 부터 선택하고, Where 로 행(레코드)를 필터링 하고, 그 이후에 Select 로 열을 필터링 함.
       책 후반부에 관련 내용 나옴.
       이 양놈들이.. 테이블 없이는 열 선택 못한다는 거 알면서도, 지네들 어순에 맞춰가지고 구지구지 select 문을 맨 앞에 두는 참사...
    
    -------------------------------------
    
    FROM 절로 테이블 선택
    
    >console.table(alasql('SELECT * FROM Customer'))
    ┌─────────┬─────────────┬───────────────┬───────────────────────┬───────────────┐
    │ (index) │ customer_id │ customer_name │       birthday        │ membertype_id │
    ├─────────┼─────────────┼───────────────┼───────────────────────┼───────────────┤
    │    0    │      1      │   '김바람'    │ '1984-06-24 00:00:00' │       2       │
    │    1    │      2      │   '이구름'    │ '1990-07-16 00:00:00' │       1       │
    │    2    │      3      │   '박하늘'    │ '1976-03-09 00:00:00' │       2       │
    │    3    │      4      │    '강산'     │ '1991-05-04 00:00:00' │       1       │
    │    4    │      5      │   '유바다'    │ '1993-04-21 00:00:00' │       2       │
    └─────────┴─────────────┴───────────────┴───────────────────────┴───────────────┘
    undefined

    WHERE 절로 행 선택(필터링)
    
    >console.table(alasql('SELECT * FROM Customer WHERE membertype_id = 2'))
    
    선택된(남은) 행
    ┌─────────┬─────────────┬───────────────┬───────────────────────┬───────────────┐
    │ (index) │ customer_id │ customer_name │       birthday        │ membertype_id │
    ├─────────┼─────────────┼───────────────┼───────────────────────┼───────────────┤
    │    0    │      1      │   '김바람'    │ '1984-06-24 00:00:00' │       2       │
    │    1    │      3      │   '박하늘'    │ '1976-03-09 00:00:00' │       2       │
    │    2    │      5      │   '유바다'    │ '1993-04-21 00:00:00' │       2       │
    └─────────┴─────────────┴───────────────┴───────────────────────┴───────────────┘
    
    선택되지 않은(제거된) 행
    ┌─────────┬─────────────┬───────────────┬───────────────────────┬───────────────┐
    │ (index) │ customer_id │ customer_name │       birthday        │ membertype_id │
    ├─────────┼─────────────┼───────────────┼───────────────────────┼───────────────┤
    │    1    │      2      │   '이구름'    │ '1990-07-16 00:00:00' │       1       │
    │    3    │      4      │    '강산'     │ '1991-05-04 00:00:00' │       1       │
    └─────────┴─────────────┴───────────────┴───────────────────────┴───────────────┘

    >console.table(alasql('SELECT customer_name FROM Customer WHERE membertype_id = 2'))
    
    SELECT 절로 열 선택(필터링)
    
    선택된(남은) 열
    ┌─────────┬───────────────┐
    │ (index) │ customer_name │
    ├─────────┼───────────────┤
    │    0    │   '김바람'    │
    │    1    │   '박하늘'    │
    │    2    │   '유바다'    │
    └─────────┴───────────────┘
    
    선택되지 않은(제거된) 열
    ┌─────────┬─────────────┬───────────────────────┬───────────────┐
    │ (index) │ customer_id │       birthday        │ membertype_id │
    ├─────────┼─────────────┼───────────────────────┼───────────────┤
    │    0    │      1      │ '1984-06-24 00:00:00' │       2       │
    │    1    │      3      │ '1976-03-09 00:00:00' │       2       │
    │    2    │      5      │ '1993-04-21 00:00:00' │       2       │
    └─────────┴─────────────┴───────────────────────┴───────────────┘
    
    -------------------------------------
    
    2. WHERE 구에 들어가는 연산자는 좌우 비교 후 0, 1, NULL 을 반환
       쉼표와 세미콜론과 같이 연산자 좌우에는 공백을 넣어주지 않아도 됨.
       공백은 예약어 앞뒤로만 넣는다.
       
    3. SELECT 구에 연산자를 쓸 수도 있다. 즉 SELECT 구에 표현식을 넣으면, 그 표현식에 해당하는 테이블 열을 생성하라고 받아들인다는 걸 알 수 있음.
    
    -------------------------------------
    SELECT 구에 1 != 2 와 2<2 를 넣은 결과는? 질의 문자열이 열의 헤더가 되고, 질의의 답이 필드로 채워진 레코드가 만들어진다.
    
    >console.table(alasql('SELECT 1 != 2, 2< 2, customer_name FROM Customer WHERE membertype_id = 2'))
    ┌─────────┬────────┬───────┬───────────────┐
    │ (index) │ 1 != 2 │ 2 < 2 │ customer_name │
    ├─────────┼────────┼───────┼───────────────┤
    │    0    │  true  │ false │   '김바람'    │
    │    1    │  true  │ false │   '박하늘'    │
    │    2    │  true  │ false │   '유바다'    │
    └─────────┴────────┴───────┴───────────────┘
    undefined
    -------------------------------------
       
    4. NULL 인지 아닌지 연산
       
       NULL 데이터베이스 내(필드)의 데이터 값이 존재하지 않는다. 빈 문자열, 공백 문자열, 0과는 다름.
       NULL 은 값이 아니니 NULL 연산은 일반 연산과 다르다.
       일반 연산을 일반값과 NULL 에 적용하면 모두 NULL 이 나온다.
       값이 아닌 거랑 값이랑 했으니 값이 아닌 게 나오는 게 맞다고 생각.
       
       
    -------------------------------------       
    필드(값) IS NULL  - 열에 해당하는 필드 값이 NULL 인 것
    필드(값) IS NOT NULL - 열에 해당하는 필드 값이 NULL 이 아닌 것
       
    >console.table(alasql('SELECT 1 = NULL, 1 IS NULL, NULL IS NULL, 1 != NULL, 1<> NULL, 1 < NULL'))
    ┌─────────┬───────────┬───────────┬──────────────┬───────────┬───────────┐
    │ (index) │ 1 = NULL  │ 1 IS NULL │ NULL IS NULL │ 1 != NULL │ 1 < NULL  │
    ├─────────┼───────────┼───────────┼──────────────┼───────────┼───────────┤
    │    0    │ undefined │   false   │     true     │ undefined │ undefined │
    └─────────┴───────────┴───────────┴──────────────┴───────────┴───────────┘

    <=> 연산자도 있다. ALASQL 에서 지원하지 않아서 부득이 AS 키워드를 사용함
   
    >console.table(alasql('SELECT 1 = NULL, 1 IS NULL AS \\'1 <=> NULL\\', NULL IS NULL AS \\'NULL <=> NULL\\', 1 != NULL, 1<> NULL, 1 < NULL'))
    ┌─────────┬───────────┬──────────────┬─────────────────┬───────────┬───────────┐
    │ (index) │ 1 = NULL  │ '1 <=> NULL' │ 'NULL <=> NULL' │ 1 != NULL │ 1 < NULL  │
    ├─────────┼───────────┼──────────────┼─────────────────┼───────────┼───────────┤
    │    0    │ undefined │    false     │      true       │ undefined │ undefined │
    └─────────┴───────────┴──────────────┴─────────────────┴───────────┴───────────┘
    -------------------------------------
       
    5. BOOLEAN 연산
    True 는 1, FALSE 는 0 테이블에 TINYINT(1) 이라서 1자리 정수라 다른 값도 들어가버림
    = 과 IS 를 사용할 수 있지만 좀 다름

    -------------------------------------
    = 는 True 를 1 , False 를 0 으로 변환해서 비교하므로, 값이 딱 맞아야 함.  
   
    >console.table(alasql('SELECT 1 = 1 AS \\'1 = TRUE\\', 0 = 0 AS \\'0 = FALSE\\', 100 = 0 AS \\'100 = TRUE\\''))
    ┌─────────┬────────────┬─────────────┬──────────────┐
    │ (index) │ '1 = TRUE' │ '0 = FALSE' │ '100 = TRUE' │
    ├─────────┼────────────┼─────────────┼──────────────┤
    │    0    │    true    │    true     │    false     │
    └─────────┴────────────┴─────────────┴──────────────┘
    undefined
  
    IS 연산자는 0 만 FALSE 이고 0 외의 모든 수는 TRUE 가 나온다.
    
    >console.table(alasql('SELECT 0 IS FALSE, 1 IS TRUE, 100 IS TRUE'))
    ┌─────────┬────────────┬───────────┬─────────────┐
    │ (index) │ 0 IS FALSE │ 1 IS TRUE │ 100 IS TRUE │
    ├─────────┼────────────┼───────────┼─────────────┤
    │    0    │    true    │   true    │    true     │
    └─────────┴────────────┴───────────┴─────────────┘
    undefined
    
    IS NOT 도 당옇니 
    ┌─────────┬────────────┬───────────┬─────────────┐
    │ (index) │ 0 IS NOT TRUE │ 1 IS TRUE │ 100 IS TRUE │
    ├─────────┼────────────┼───────────┼─────────────┤
    │    0    │    true    │   true    │    true     │
    └─────────┴────────────┴───────────┴─────────────┘
    
    아 근데 ALASQL 에서 IS NOT 이 제대로 구현되지 않은 듯
    문서도 없고 
    https://github.com/AlaSQL/alasql/search?q=is+not&type=wikis
    일단 이슈 올려두었다.
    https://github.com/AlaSQL/alasql/issues/146    
   
    
    >console.table(alasql('SELECT 0 IS NOT TRUE, -1 IS NOT TRUE, 1 IS NOT TRUE'))
    ┌─────────┬────────────────┬─────────────────┬────────────────┐
    │ (index) │ 0 IS NOT(TRUE) │ -1 IS NOT(TRUE) │ 1 IS NOT(TRUE) │
    ├─────────┼────────────────┼─────────────────┼────────────────┤
    │    0    │      true      │      true       │      true      │
    └─────────┴────────────────┴─────────────────┴────────────────┘
    
    >console.table(alasql('SELECT 0 IS NOT 1, -1 IS NOT 1, 1 IS NOT 1, 100 IS NOT 1'))
    ┌─────────┬─────────────┬──────────────┬─────────────┬───────────────┐
    │ (index) │ 0 IS NOT(1) │ -1 IS NOT(1) │ 1 IS NOT(1) │ 100 IS NOT(1) │
    ├─────────┼─────────────┼──────────────┼─────────────┼───────────────┤
    │    0    │    true     │     true     │    true     │     true      │
    └─────────┴─────────────┴──────────────┴─────────────┴───────────────┘


    -------------------------------------
        
    3. 쉼표나 마침표 등 사이에는 공백 필요 없고, 예약어 등에는 공백 필요
    
    SELECT book_name,price,book_name
    FROM Book
        
    4. * 는 테이블 원래 열 순서로, 그게 아니면 적어둔 순서대로 조회됨
    
    5. AS 는 결과 열의 별명을 붙인다.
        
    `)
}
function q1(alasql){
    alasql(
        `
            SELECT 
                *
            FROM 
                Member;
                
            SELECT 
                member_id,
                member_name
            FROM 
                Member;
        `, [], resArr => {
            console.log('/////////////')
            console.log('1장 1번 문제 답')
            console.log('/////////////')

            console.table(resArr[0])
            console.table(resArr[1])
    })
}

function q2(alasql){
    alasql('SELECT member_name, birthday, tel FROM Member;', [], res => {
        console.log('/////////////')
        console.log('1장 2번 문제 답')
        console.log('/////////////')
        console.table(res)
        })
}

function q3(alasql){
    alasql('SELECT member_name AS \'이름\', tel AS \'연락처\' FROM Member;', [], res => {
        console.log('/////////////')
        console.log('1장 3번 문제 답')
        console.log('/////////////')
        console.table(res)
    })
}

console.log('ji 의 chap1 로드됨')

module.exports = (populatedAlasql)=> {
    // 클로저처리가 되어서 populatedAlasql 가 클로저 내부에 저장됨.
    // 리턴되는 함수가 호출될 때 부모 클로저 안에 populatedAlasql 에 접근 가능
    return {
        review: () =>{ review(populatedAlasql)},
        q1: () =>{ q1(populatedAlasql) },
        q2: () =>{ q2(populatedAlasql) },
        q3: () =>{ q3(populatedAlasql) }
    }
}