function review(alasql){
    console.log(`
    /////////////
    2장 내용 복습
    /////////////
    
    1. 논리 연산자
    
       AND(&&) 논리곱 - 둘 다 참(1)일 때면 곱해서 참(1)
       OR(||) 논리합 - 둘 중 하나가 참(1)이면 합해서 참(1 이상)
       NOT(!) 부정 - 거짓(0) 이면 참(1) 로 바꾸고, 참(1 이상)은 모두 거짓(0)으로 바꿈
       XOR  베타적 논리합 - 더해서 엄밀하게 참(1)이 될 떄만 참(1), 더해서 거짓(0) 이나 1이 초과하는 참은 거짓. 
                          베타적 논리합은 둘중에 한 조건맞 맞아야 하고 둘 다 맞는 케이스는 빼고 싶을 때 씀
 
    -------------------------------------

    논리곱 - AND 사용
    
    >console.table(alasql('SELECT product_name, price >= 100, price < 150, price >= 100 AND price < 150 FROM Product'))
    ┌─────────┬──────────────────────┬──────────────┬─────────────┬──────────────────────────────┐
    │ (index) │     product_name     │ price >= 100 │ price < 150 │ price >= 100 AND price < 150 │
    ├─────────┼──────────────────────┼──────────────┼─────────────┼──────────────────────────────┤
    │    0    │    '약용 입욕제'     │    false     │    true     │            false             │
    │    1    │    '약용 핸드솝'     │     true     │    false    │            false             │
    │    2    │ '천연 아로마 입욕제' │     true     │    true     │             true             │ // AND 양쪽이 참
    │    3    │    '거품 목욕제'     │     true     │    true     │             true             │ // AND 양쪽이 참
    │    4    │   '비누 딸기100%'    │     true     │    false    │            false             │
    │    5    │  '100%우유_입욕제'   │     true     │    true     │             true             │ // AND 양쪽이 참
    └─────────┴──────────────────────┴──────────────┴─────────────┴──────────────────────────────┘
    undefined
    >console.table(alasql('SELECT product_name, price >= 100, price < 150, price >= 100 AND price < 150 FROM Product WHERE price >= 100 AND price < 150'))
    ┌─────────┬──────────────────────┬──────────────┬─────────────┬──────────────────────────────┐
    │ (index) │     product_name     │ price >= 100 │ price < 150 │ price >= 100 AND price < 150 │
    ├─────────┼──────────────────────┼──────────────┼─────────────┼──────────────────────────────┤
    │    0    │ '천연 아로마 입욕제' │     true     │    true     │             true             │
    │    1    │    '거품 목욕제'     │     true     │    true     │             true             │
    │    2    │  '100%우유_입욕제'   │     true     │    true     │             true             │
    └─────────┴──────────────────────┴──────────────┴─────────────┴──────────────────────────────┘

    AND 가 연속이면 앞에 AND 해결 후 그 결과를 다음 AND 의 앞부분 피연산자로 사용.
    
    >console.table(alasql('SELECT product_name, price >= 100 AND price < 150, stock >= 10 FROM Product'))
    ┌─────────┬──────────────────────┬──────────────────────────────┬─────────────┐
    │ (index) │     product_name     │ price >= 100 AND price < 150 │ stock >= 10 │
    ├─────────┼──────────────────────┼──────────────────────────────┼─────────────┤
    │    0    │    '약용 입욕제'     │            false             │    true     │
    │    1    │    '약용 핸드솝'     │            false             │    true     │
    │    2    │ '천연 아로마 입욕제' │             true             │    false    │
    │    3    │    '거품 목욕제'     │             true             │    true     │ // 앞선 AND 연산 결과가 뒤 연산의 피연산자로 사용
    │    4    │   '비누 딸기100%'    │            false             │    true     │
    │    5    │  '100%우유_입욕제'   │             true             │    true     │ // 앞선 AND 연산 결과가 뒤 연산의 피연산자로 사용
    └─────────┴──────────────────────┴──────────────────────────────┴─────────────┘
    undefined
    >console.table(alasql('SELECT product_name, price >= 100 AND price < 150, stock >= 10 FROM Product WHERE price >= 100 AND price < 150 AND stock >= 10'))
    ┌─────────┬───────────────────┬──────────────────────────────┬─────────────┐
    │ (index) │   product_name    │ price >= 100 AND price < 150 │ stock >= 10 │
    ├─────────┼───────────────────┼──────────────────────────────┼─────────────┤
    │    0    │   '거품 목욕제'   │             true             │    true     │
    │    1    │ '100%우유_입욕제' │             true             │    true     │
    └─────────┴───────────────────┴──────────────────────────────┴─────────────┘
    undefined
        
    -------------------------------------
    
    2. AND 연산과 NULL 
       
       0 AND NULL 은 0 이고, 그 외에 나머지는 모두 NULL 을 반환
       
    -------------------------------------
    ALASQL 에서는 NULL 대신에 undefined 가 나온다.. 끙.. 여튼 NULL 이 undefined 에 대응되는 게 맞다.
    JS 에서 NULL 은 의도를 가지고 비워놓은 것이고, undefined 는 컴파일러 내부에 값이 없는 거니까.
    테이블 내에 값이 없는 것이 NULL 이니까. JS 에서는 undefined 에 대응되는 것이 말이된다.
    
    >console.table(alasql('SELECT 0 AND NULL, 1 AND NULL, NULL AND NULL'))
    ┌─────────┬────────────┬────────────┬───────────────┐
    │ (index) │ 0 AND NULL │ 1 AND NULL │ NULL AND NULL │
    ├─────────┼────────────┼────────────┼───────────────┤
    │    0    │     0      │ undefined  │   undefined   │
    └─────────┴────────────┴────────────┴───────────────┘

    -------------------------------------
    
    3. OR 논리합 사용
    
    -------------------------------------
    >console.table(alasql('SELECT product_name, price<100, price>=150, price < 100 OR price >= 150 FROM Product'))
    ┌─────────┬──────────────────────┬─────────────┬──────────────┬─────────────────────────────┐
    │ (index) │     product_name     │ price < 100 │ price >= 150 │ price < 100 OR price >= 150 │
    ├─────────┼──────────────────────┼─────────────┼──────────────┼─────────────────────────────┤
    │    0    │    '약용 입욕제'     │    true     │    false     │            true             │  // 합이 참(1 이상)
    │    1    │    '약용 핸드솝'     │    false    │     true     │            true             │   // 합이 참(1 이상)
    │    2    │ '천연 아로마 입욕제' │    false    │    false     │            false            │
    │    3    │    '거품 목욕제'     │    false    │    false     │            false            │
    │    4    │   '비누 딸기100%'    │    false    │     true     │            true             │  // 합이 참(1 이상)
    │    5    │  '100%우유_입욕제'   │    false    │    false     │            false            │
    └─────────┴──────────────────────┴─────────────┴──────────────┴─────────────────────────────┘

    >console.table(alasql('SELECT product_name, price<100, price>=150, price < 100 OR price >= 150 FROM Product WHERE price < 100 OR price >= 150'))
    ┌─────────┬─────────────────┬─────────────┬──────────────┬─────────────────────────────┐
    │ (index) │  product_name   │ price < 100 │ price >= 150 │ price < 100 OR price >= 150 │
    ├─────────┼─────────────────┼─────────────┼──────────────┼─────────────────────────────┤
    │    0    │  '약용 입욕제'  │    true     │    false     │            true             │
    │    1    │  '약용 핸드솝'  │    false    │     true     │            true             │
    │    2    │ '비누 딸기100%' │    false    │     true     │            true             │
    └─────────┴─────────────────┴─────────────┴──────────────┴─────────────────────────────┘
    
    기계가 되는 거 같다. 어떤 요구사항도 없고, 그 요구사항을 가지고 내가 뭐 공부하는 것도 아니고. 그냥 책에 나온 대로 치고 결과보고 그래.
    -------------------------------------
       
    4. NOT 사용
       
       거짓(0) 이면 참(1)을 반환하고
       참(1이상) 이면 거짓(0)을 반환한다.
     
    -------------------------------------       
    >console.table(alasql('SELECT customer_name AS "고객이름", membertype_id AS "유형", membertype_id = 1, NOT (membertype_id = 1) FROM Customer'))
    ┌─────────┬────────────┬────────┬───────────────────┬──────────────────────────┐
    │ (index) │ '고객이름' │ '유형' │ membertype_id = 1 │ NOT((membertype_id = 1)) │
    ├─────────┼────────────┼────────┼───────────────────┼──────────────────────────┤
    │    0    │  '김바람'  │   2    │       false       │           true           │ // 유형이 1이 아닌 레코드
    │    1    │  '이구름'  │   1    │       true        │          false           │
    │    2    │  '박하늘'  │   2    │       false       │           true           │ // 유형이 1이 아닌 레코드
    │    3    │   '강산'   │   1    │       true        │          false           │
    │    4    │  '유바다'  │   2    │       false       │           true           │ // 유형이 1이 아닌 레코드
    └─────────┴────────────┴────────┴───────────────────┴──────────────────────────┘

    -------------------------------------
       
    5. XOR 사용
    
    베타적 논리합. 핵심은 더해서 1 인것만 참이고, 0이거나 1 초과면 거짓.
                 둘 중 하나만 참인 베타적인 상황만 참이고, 둘 다 참인 경우는 베타적인 상황이 아니니, 거짓으로 침.
                

    -------------------------------------
    ALASQL 은 쿼리 문에 XOR 이 예약어로 없음. 즉 수동으로 구현해야함.
    합해서 참이면서 동시에 둘 중 하나는 거짓이여야 함.
    둘중 하나는 거짓이어야 함.
    둘 다 참이면 안됨
    
    AND 로는 어려움.
    NOT(TRUE) AND NOT(TRUE) = FALSE 이거는 안될 거 같음 왜냐면.. 첫번째 FALSE 면 FALSE 임. 두 항 다 고려하지 않음.
   
    
    OR 로는 가능함
    FALSE OR FALSE = FALSE
    NOT(TRUE) OR NOT(TRUE) = FALSE
    뒤집으면 NOT(A AND B) 
    
    다 안되고..
    
    둘 중 하나는 거짓
    https://www.tutorialgateway.org/mysql-xor-operator/
    (x AND (NOT y)) OR ((NOT x) AND y)
    (앞에만 참) 합 (뒤에만 참) = 앞이나 뒤에만 참인 경우.
    둘다 참인 경우
    참 AND 거짓 = 거짓. 거짓 OR 거짓 = 거짓.
    둘다 거짓 경우
    거직 AND 참 = 거짓. 거짓 OR 거짓 = 거짓.
    
    흠.. 진짜네 둘중 하나만 참일 때 참으로 되는 조건이라서..
    
    >console.table(alasql('SELECT product_name AS "제폼명", price AS "가격", price>= 100, price<150, (price>=100 AND (NOT(price<150))) OR ((NOT(price>=100)) AND price<150) AS "price>=100 XOR price < 150" FROM Product'))
    ┌─────────┬──────────────────────┬────────┬──────────────┬─────────────┬──────────────────────────────┐
    │ (index) │       '제폼명'       │ '가격' │ price >= 100 │ price < 150 │ 'price>=100 XOR price < 150' │
    ├─────────┼──────────────────────┼────────┼──────────────┼─────────────┼──────────────────────────────┤
    │    0    │    '약용 입욕제'     │   70   │    false     │    true     │             true             │ // 베타적 상황
    │    1    │    '약용 핸드솝'     │  700   │     true     │    false    │             true             │ // 베타적 상황
    │    2    │ '천연 아로마 입욕제' │  120   │     true     │    true     │            false             │
    │    3    │    '거품 목욕제'     │  120   │     true     │    true     │            false             │
    │    4    │   '비누 딸기100%'    │  150   │     true     │    false    │             true             │ // 베타적 상황
    │    5    │  '100%우유_입욕제'   │  140   │     true     │    true     │            false             │
    └─────────┴──────────────────────┴────────┴──────────────┴─────────────┴──────────────────────────────┘

    XOR 문 세 개를 쓰려면.. 너무 복잡해져서 그만 둠....

    -------------------------------------
        
    3. XOR 과 NULL
    
    MYSQL 에서는 NULL 에 대해서 XOR 을 하면 무조건 NULL 이 된다고 함.
    NULL 이 TRUE 는 아니고 FALSE 도 아니니. TRUE/FALSE 베타적 상황이 아니긴 해.
    
    근데 ALASQL 은 NOT(NULL) 을 true 로 반환함.. 여튼 xor 이 alasql 에서 제대로 작동 안하는 거 감안할 것
    
    4. BETWEEN AND, NOT BETWEEN AND
    
    이상 이하. 100 <= price <= 150 요걸 price BETWEEN 100 and 150 라고 편하게 표현.
    
    https://github.com/AlaSQL/alasql/wiki/Operators
    
    ------------------------------------- 
    
    >console.table(alasql('SELECT *, price BETWEEN 100 and 150 FROM Product'))
    ┌─────────┬────────────┬──────────────────────┬───────┬───────┬───────────────────────────┐
    │ (index) │ product_id │     product_name     │ stock │ price │ price BETWEEN 100 AND 150 │
    ├─────────┼────────────┼──────────────────────┼───────┼───────┼───────────────────────────┤
    │    0    │     1      │    '약용 입욕제'     │  100  │  70   │           false           │
    │    1    │     2      │    '약용 핸드솝'     │  23   │  700  │           false           │
    │    2    │     3      │ '천연 아로마 입욕제' │   4   │  120  │           true            │
    │    3    │     4      │    '거품 목욕제'     │  23   │  120  │           true            │
    │    4    │     5      │   '비누 딸기100%'    │  10   │  150  │           true            │
    │    5    │     6      │  '100%우유_입욕제'   │  15   │  140  │           true            │
    └─────────┴────────────┴──────────────────────┴───────┴───────┴───────────────────────────┘

    NOT 쓰면.. False(0) 이 아닌 건 1로 뒤집어 버리고, 1이상인 건 0으로 뒤집으니.. 반대로 됨..
    
    이상 이하 => 미만 초과로 바뀜
    
    >console.table(alasql('SELECT *, price NOT BETWEEN 100 and 150 FROM Product'))
    ┌─────────┬────────────┬──────────────────────┬───────┬───────┬───────────────────────────────┐
    │ (index) │ product_id │     product_name     │ stock │ price │ price NOT BETWEEN 100 AND 150 │
    ├─────────┼────────────┼──────────────────────┼───────┼───────┼───────────────────────────────┤
    │    0    │     1      │    '약용 입욕제'     │  100  │  70   │             true              │
    │    1    │     2      │    '약용 핸드솝'     │  23   │  700  │             true              │
    │    2    │     3      │ '천연 아로마 입욕제' │   4   │  120  │             false             │
    │    3    │     4      │    '거품 목욕제'     │  23   │  120  │             false             │
    │    4    │     5      │   '비누 딸기100%'    │  10   │  150  │             false             │
    │    5    │     6      │  '100%우유_입욕제'   │  15   │  140  │             false             │
    └─────────┴────────────┴──────────────────────┴───────┴───────┴───────────────────────────────┘

    날짜에도 적용 가능하다.
    
    >console.table(alasql('SELECT *, birthday BETWEEN "1990-01-01" and "1999-12-31" FROM Customer ORDER BY birthday DESC'))
    ┌─────────┬─────────────┬───────────────┬───────────────────────┬───────────────┬────────────────────────────────────────────────┐
    │ (index) │ customer_id │ customer_name │       birthday        │ membertype_id │ birthday BETWEEN '1990-01-01' AND '1999-12-31' │
    ├─────────┼─────────────┼───────────────┼───────────────────────┼───────────────┼────────────────────────────────────────────────┤
    │    0    │      5      │   '유바다'    │ '1993-04-21 00:00:00' │       2       │                      true                      │
    │    1    │      4      │    '강산'     │ '1991-05-04 00:00:00' │       1       │                      true                      │
    │    2    │      2      │   '이구름'    │ '1990-07-16 00:00:00' │       1       │                      true                      │
    │    3    │      1      │   '김바람'    │ '1984-06-24 00:00:00' │       2       │                     false                      │
    │    4    │      3      │   '박하늘'    │ '1976-03-09 00:00:00' │       2       │                     false                      │
    └─────────┴─────────────┴───────────────┴───────────────────────┴───────────────┴────────────────────────────────────────────────┘


    -------------------------------------

    5. IN 과 NOT IN
    
    나열된 집단의 값 중 하나에 포함되는 것을 편하게 찾는 거.
    원래라면 열 = a or 열 =b or 열 = c or 이렇게 or 로 연결해야하는데. 그냥 쉼표로 합치게 해줌.
    열거~
    
    https://github.com/AlaSQL/alasql/wiki/Operators
    
    -------------------------------------
    >console.table(alasql('SELECT *, product_id IN (1,3,4) FROM Product ORDER BY product_id IN (1,3,4) DESC'))
    ┌─────────┬────────────┬──────────────────────┬───────┬───────┬───────────────────────┐
    │ (index) │ product_id │     product_name     │ stock │ price │ product_id IN (1,3,4) │
    ├─────────┼────────────┼──────────────────────┼───────┼───────┼───────────────────────┤
    │    0    │     1      │    '약용 입욕제'     │  100  │  70   │         true          │
    │    1    │     3      │ '천연 아로마 입욕제' │   4   │  120  │         true          │
    │    2    │     4      │    '거품 목욕제'     │  23   │  120  │         true          │
    │    3    │     2      │    '약용 핸드솝'     │  23   │  700  │         false         │
    │    4    │     5      │   '비누 딸기100%'    │  10   │  150  │         false         │
    │    5    │     6      │  '100%우유_입욕제'   │  15   │  140  │         false         │
    └─────────┴────────────┴──────────────────────┴───────┴───────┴───────────────────────┘

    일치 하지 않은 거는 NOT IN
    >console.table(alasql('SELECT *, product_id IN (1,3,4) FROM Product ORDER BY product_id NOT IN (1,3,4) DESC'))
    ┌─────────┬────────────┬──────────────────────┬───────┬───────┬───────────────────────┐
    │ (index) │ product_id │     product_name     │ stock │ price │ product_id IN (1,3,4) │
    ├─────────┼────────────┼──────────────────────┼───────┼───────┼───────────────────────┤
    │    0    │     2      │    '약용 핸드솝'     │  23   │  700  │         false         │
    │    1    │     5      │   '비누 딸기100%'    │  10   │  150  │         false         │
    │    2    │     6      │  '100%우유_입욕제'   │  15   │  140  │         false         │
    │    3    │     1      │    '약용 입욕제'     │  100  │  70   │         true          │
    │    4    │     3      │ '천연 아로마 입욕제' │   4   │  120  │         true          │
    │    5    │     4      │    '거품 목욕제'     │  23   │  120  │         true          │
    └─────────┴────────────┴──────────────────────┴───────┴───────┴───────────────────────┘

    NULL 을 넣어서 연산하면 모두 NULL 이 됨. 여기서는 undefined 가됨. ㅎㅎ
    
    >console.table(alasql('SELECT *, product_id IN (1,3,NULL) FROM Product ORDER BY product_id NOT IN (1,3,NULL) DESC'))
    ┌─────────┬────────────┬──────────────────────┬───────┬───────┬──────────────────────────┐
    │ (index) │ product_id │     product_name     │ stock │ price │ product_id IN (1,3,NULL) │
    ├─────────┼────────────┼──────────────────────┼───────┼───────┼──────────────────────────┤
    │    0    │     1      │    '약용 입욕제'     │  100  │  70   │        undefined         │
    │    1    │     2      │    '약용 핸드솝'     │  23   │  700  │        undefined         │
    │    2    │     3      │ '천연 아로마 입욕제' │   4   │  120  │        undefined         │
    │    3    │     4      │    '거품 목욕제'     │  23   │  120  │        undefined         │
    │    4    │     5      │   '비누 딸기100%'    │  10   │  150  │        undefined         │
    │    5    │     6      │  '100%우유_입욕제'   │  15   │  140  │        undefined         │
    └─────────┴────────────┴──────────────────────┴───────┴───────┴──────────────────────────┘

    문자열도 된다!!
    
    >console.table(alasql('SELECT *, name IN ("김보라","유분홍","김초록") FROM Applier ORDER BY name IN ("김보라","유분홍","김초록") DESC'))
    ┌─────────┬──────────┬─────────┬──────────┬─────┬───────────────────────┬──────────────────────────────────────┐
    │ (index) │ apply_id │ product │   name   │ age │      apply_date       │ name IN ('김보라','유분홍','김초록') │
    ├─────────┼──────────┼─────────┼──────────┼─────┼───────────────────────┼──────────────────────────────────────┤
    │    0    │    1     │   'A'   │ '김보라' │ 25  │ '2019-12-10 00:00:00' │                 true                 │
    │    1    │    4     │   'B'   │ '유분홍' │ 30  │ '2020-01-01 00:00:00' │                 true                 │
    │    2    │    5     │   'C'   │ '김초록' │ 26  │ '2020-01-01 00:00:00' │                 true                 │
    │    3    │    2     │   'A'   │ '이하늘' │ 42  │ '2019-12-24 00:00:00' │                false                 │
    │    4    │    3     │   'C'   │ '박하얀' │ 31  │ '2019-12-28 00:00:00' │                false                 │
    └─────────┴──────────┴─────────┴──────────┴─────┴───────────────────────┴──────────────────────────────────────┘
    -------------------------------------
    
    6. 연산자와 우선순위
    
    -------------------------------------
    
    연산자 사용
    
    >alasql.fn.div = function(x,y) {return parseInt(x / y)}
    [Function (anonymous)]
    >console.table(alasql('SELECT 1+2.5, 5-2, 2* -3, 7/2, 7 % 2, div(7,2) AS "7 DIV 2", 7 % 2 AS "7 MOD 2"'))
    ┌─────────┬─────────┬───────┬────────┬───────┬───────┬───────────┬───────────┐
    │ (index) │ 1 + 2.5 │ 5 - 2 │ 2 * -3 │ 7 / 2 │ 7 % 2 │ '7 DIV 2' │ '7 MOD 2' │
    ├─────────┼─────────┼───────┼────────┼───────┼───────┼───────────┼───────────┤
    │    0    │   3.5   │   3   │   -6   │  3.5  │   1   │     3     │     1     │
    └─────────┴─────────┴───────┴────────┴───────┴───────┴───────────┴───────────┘

    우선순위
    
    ┌─────────┬────────────┐
    │ 우선순위  │  연산자     │
    ├─────────┼─────────────┤
    │  높다    │   BINARY   │
    ├─────────┼─────────────┤
    │         │   !        │
    ├─────────┼─────────────┤
    │         │   &,/,DIV, %, MOD
    ├─────────┼─────────────┤
    │         │   -.+      │
    ├─────────┼─────────────┤
    │         │   = (비교), <=>, >=, <=, <, <>, !=, IS, LIKE, IN
    ├─────────┼─────────────┤
    │         │   BETWEEN, CASE, WHEN, THEN, ELSE
    ├─────────┼─────────────┤
    │         │   NOT      │
    ├─────────┼─────────────┤
    │         │   &&, AND │
    ├─────────┼─────────────┤
    │         │   XOR      │
    ├─────────┼─────────────┤
    │  낮다    │   ||, OR│
    └─────────┴─────────────┘
    
    1. () 최우선 
    2. 연산자 우선순위를 따른다.
    3. 같은 순위라면 앞에서부터 차례로 연산한다.
    
   
    나눗셈과 곱셉은 덧셈과 뺄셈에 우선순위이고, 괄호보다는 후순위다.
    
    앞선 것은 1+6, 뒤 것은 3*3 이다.    

    >console.table(alasql('SELECT 1+2*3, (1+2)*3'))
    ┌─────────┬───────────┬─────────────┐
    │ (index) │ 1 + 2 * 3 │ (1 + 2) * 3 │
    ├─────────┼───────────┼─────────────┤
    │    0    │     7     │      9      │
    └─────────┴───────────┴─────────────┘
    
    AND 는 OR 에 우선한다.
    
    아래른 가격이 130 미만, 150 초과인 상품을 찾고, 그 중 수량이 20개 이하인 상품을 찾으려고 한 건데..
    OR 보다 AND 가 우선순위라서, 가격이 150 초과하면서 수량이 20개 이하인 제품을 찾은 뒤, 그 중에서 가격이 130 미만일지도 모르는 상품을 찾는다.
    
    >console.table(alasql('SELECT *, price > 150 AND stock >= 20, price < 130 OR (price > 150 AND stock >= 20) FROM Product'))
    ┌─────────┬────────────┬──────────────────────┬───────┬───────┬─────────────────────────────┬──────────────────────────────────────────────┐
    │ (index) │ product_id │     product_name     │ stock │ price │ price > 150 AND stock >= 20 │ price < 130 OR (price > 150 AND stock >= 20) │
    ├─────────┼────────────┼──────────────────────┼───────┼───────┼─────────────────────────────┼──────────────────────────────────────────────┤
    │    0    │     1      │    '약용 입욕제'     │  100  │  70   │            false            │                     true                     │
    │    1    │     2      │    '약용 핸드솝'     │  23   │  700  │            true             │                     true                     │
    │    2    │     3      │ '천연 아로마 입욕제' │   4   │  120  │            false            │                     true                     │
    │    3    │     4      │    '거품 목욕제'     │  23   │  120  │            false            │                     true                     │
    │    4    │     5      │   '비누 딸기100%'    │  10   │  150  │            false            │                    false                     │
    │    5    │     6      │  '100%우유_입욕제'   │  15   │  140  │            false            │                    false                     │
    └─────────┴────────────┴──────────────────────┴───────┴───────┴─────────────────────────────┴──────────────────────────────────────────────┘

    OR 를 괄호로 묶어서. AND 보다 우선 연산하게 만들게 하면 제대로 연산이 된다.
    
    >console.table(alasql('SELECT *, price <130 OR price > 150, (price <130 OR price > 150) AND stock >= 20 FROM Product ORDER BY (price <130 OR price > 150) AND stock >= 20 DESC'))
    ┌─────────┬────────────┬──────────────────────┬───────┬───────┬────────────────────────────┬──────────────────────────────────────────────┐
    │ (index) │ product_id │     product_name     │ stock │ price │ price < 130 OR price > 150 │ (price < 130 OR price > 150) AND stock >= 20 │
    ├─────────┼────────────┼──────────────────────┼───────┼───────┼────────────────────────────┼──────────────────────────────────────────────┤
    │    0    │     1      │    '약용 입욕제'     │  100  │  70   │            true            │                     true                     │
    │    1    │     2      │    '약용 핸드솝'     │  23   │  700  │            true            │                     true                     │
    │    2    │     4      │    '거품 목욕제'     │  23   │  120  │            true            │                     true                     │
    │    3    │     3      │ '천연 아로마 입욕제' │   4   │  120  │            true            │                    false                     │
    │    4    │     5      │   '비누 딸기100%'    │  10   │  150  │           false            │                    false                     │
    │    5    │     6      │  '100%우유_입욕제'   │  15   │  140  │           false            │                    false                     │
    └─────────┴────────────┴──────────────────────┴───────┴───────┴────────────────────────────┴──────────────────────────────────────────────┘

    
        -------------------------------------

    `)
}
function q1(alasql){
    alasql(
        `
            SELECT 
                id, student_name, height, weight, (height >=160 AND weight > 60) 
            FROM 
                Student
            ORDER BY
                height >=160 AND weight > 60 DESC,
                height ASC, weight ASC
            ;
                
            SELECT 
                id, student_name, height, height >=170, weight,  weight <50, blood_type,blood_type = 'AB', (height >=170 OR weight <50 OR blood_type = 'AB') AS '모두 OR'
            FROM 
                Student
            WHERE
                height >=170
                OR weight < 50
                OR blood_type = 'AB'
            ;

            SELECT
                id, student_name, blood_type, NOT blood_type = 'A'
            FROM
                Student
            ORDER BY
                NOT blood_type = 'A' DESC
            ;

        `, [], resArr => {
            console.log('/////////////')
            console.log('1장 1번 문제 답')
            console.log('/////////////')

            console.table(resArr[0])
            console.table(resArr[1])
            console.table(resArr[2])
    })
}

function q2(alasql){

        console.log('/////////////')
        console.log('1장 2번 문제 답')
        console.log('/////////////')
        console.log(`
        1. height 가 155 이하, 또는 165 이상
           height <= 155 AND height > 165
          
           
           결과 레코드 개수 2
           
           => 땡!!! 또는 이니까 OR 인데 AND 씀.. 끙. ㅎㅎ 디테일이 부족하구만요.
            
        2. blood_type이 0 또는 weight가 60 이상 중 어느 한쪽만
            blood_type = 'o' XOR height >= 165
            
            결과 레코드 개수 1
            
            => 땡!!!!! ㅎ.. 적어가면서 해야하나보다. 눈대중으로 자꾸 틀리네.
            
            >console.table(alasql('SELECT student_name, height, blood_type, blood_type="O", height >=165, blood_type = "O" AND (NOT height >=165) OR (NOT blood_type = "O" AND height >=165) AS "blood_type = 0 XOR height >=165"
            FROM Student ORDER BY blood_type = "O" AND (NOT height >=165) OR (NOT blood_type = "O" AND height >=165) DESC'))
            ┌─────────┬──────────────┬────────┬────────────┬──────────────────┬───────────────┬───────────────────────────────────┐
            │ (index) │ student_name │ height │ blood_type │ blood_type = 'O' │ height >= 165 │ 'blood_type = 0 XOR height >=165' │
            ├─────────┼──────────────┼────────┼────────────┼──────────────────┼───────────────┼───────────────────────────────────┤
            │    0    │   '이민지'   │  160   │    'O'     │       true       │     false     │               true                │
            │    1    │   '김민준'   │  172   │    'A'     │      false       │     true      │               true                │
            │    2    │   '박서연'   │  158   │    'B'     │      false       │     false     │               false               │
            │    3    │   '강예은'   │  161   │    'A'     │      false       │     false     │               false               │
            │    4    │   '김동현'   │  168   │    'O'     │       true       │     true      │               false               │
            │    5    │   '이수민'   │  153   │    'AB'    │      false       │     false     │               false               │
            └─────────┴──────────────┴────────┴────────────┴──────────────────┴───────────────┴───────────────────────────────────┘

             
        3. height 가  155 오늘 이상 그리고 165 이하, 또는 weight 가 50이상 그리고 65 이하
           height > 155 AND height <= 165 => 이민지, 강예은, 김동현
           OR
           weight > 50 AND weight <= 65 이민지, 김진중, 강예은, 김동현
          
           // AND 우선순위가 높아서 정상적인 순저대로 연산됨.
           
           결과 레코드 개수 4
           
           => 땡... 첫번째 조건을 제대로 안 봄..
           
           >console.table(alasql('SELECT student_name, height > 155 AND height <=165, weight > 50 AND weight <= 65  FROM Student WHERE height > 155 AND height <=165 OR weight > 50 AND weight <= 65'))
            ┌─────────┬──────────────┬────────────────────────────────┬──────────────────────────────┐
            │ (index) │ student_name │ height > 155 AND height <= 165 │ weight > 50 AND weight <= 65 │
            ├─────────┼──────────────┼────────────────────────────────┼──────────────────────────────┤
            │    0    │   '이민지'   │              true              │             true             │
            │    1    │   '김민준'   │             false              │             true             │
            │    2    │   '박서연'   │              true              │            false             │
            │    3    │   '강예은'   │              true              │             true             │
            │    4    │   '김동현'   │             false              │             true             │
            └─────────┴──────────────┴────────────────────────────────┴──────────────────────────────┘

     
        `)

}

function q3(alasql){
    console.log('/////////////')
    console.log('1장 3번 문제 답')
    console.log('/////////////')

    console.log(`
    BETWEEN 과 IN 을 사용해서 SQL 문 바꾸기
    
    1. WHERE birthday BETWEEN '1998-01-01' AND '1999-12-31'
    2. WHERE blood_type IN ('A', 'B')
    `)
}

function q4(alasql){
    console.log('/////////////')
    console.log('1장 4번 문제 답')
    console.log('/////////////')

    console.log(`
    연산자 우선순위를 고려해서 BMI 결과가 제대로 나오는 식을 선택하기
    
    현재 키는 cm 를 씀.
    [체중(kg)/키(m) 의 제곱]
    
    weight / ( (height/100) * (height/100) )
    
    >console.table(alasql('SELECT student_name, height, weight, weight/((height/100)*(height/100)) AS BMI FROM Student'))
    ┌─────────┬──────────────┬────────┬────────┬────────────────────┐
    │ (index) │ student_name │ height │ weight │        BMI         │
    ├─────────┼──────────────┼────────┼────────┼────────────────────┤
    │    0    │   '이민지'   │  160   │   51   │ 19.921874999999996 │
    │    1    │   '김민준'   │  172   │   65   │ 21.971335857220122 │
    │    2    │   '박서연'   │  158   │   48   │ 19.227687870533565 │
    │    3    │   '강예은'   │  161   │   55   │ 21.218317194552675 │
    │    4    │   '김동현'   │  168   │   62   │  21.9671201814059  │
    │    5    │   '이수민'   │  153   │   42   │ 17.941817249775728 │
    └─────────┴──────────────┴────────┴────────┴────────────────────┘
 
    `)
}

function q5(alasql){
    console.log('/////////////')
    console.log('1장 5번 문제 답')
    console.log('/////////////')

    console.log(`
    1. 우선순위 : AND > OR
       - 0 AND 1 = 0
       - 0 OR 0 OR 1 = 1
       
    2. 우선순위 : () > AND > OR
       - (0 OR 0) = 0, (1 OR 1) = 1
       - 0 AND 1 = 0
       
    3. 연산자 % = MOD 나눈 나머지
       - 20 MOD 5 = 20 % 5 = 4(나머지 0)
       - 나머지 0
       
    4. 연산자 DIV = 나눈 몫
       - 30 DIV 12 = 30/12 = 2.5(나머지 0)
       - 몫 2.5
       
       => 땡 DIV 는 몫의 정수부만 반환한다고 한다. 그러니 2
       
    5. 연산자 우선순위 : 곱셉나눗셈 > 덧셈뺄셈
       - 2*3 = 6, 4*1 = 4
       - 1 + 6 - 4 = 3   
         
    `)
}

console.log('ji 의 chap3 로드됨')

module.exports = (populatedAlasql)=> {
    // 클로저처리가 되어서 populatedAlasql 가 클로저 내부에 저장됨.
    // 리턴되는 함수가 호출될 때 부모 클로저 안에 populatedAlasql 에 접근 가능
    return {
        review: () =>{ review(populatedAlasql)},
        q1: () =>{ q1(populatedAlasql) },
        q2: () =>{ q2(populatedAlasql) },
        q3: () =>{ q3(populatedAlasql) },
        q4: () =>{ q5(populatedAlasql) },
        q5: () =>{ q5(populatedAlasql) }
    }
}